from aiogram import Router, F, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from static.config import bot
from static.kb import create_dynamic_kb, cancel_kb, start_kb, create_end_kb
from static.text import *
from commands.ai import ask_ai
from commands.start import start

fsm_router = Router()

class Food(StatesGroup):
    type = State()
    mood = State()
    aim = State()
    calories = State()
    meals = State()
    format = State()
    preferences = State()
    drink_effect = State()
    drink_base = State()
    done = State()

@fsm_router.callback_query(F.data == "cancel")
async def cancel_process(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer("–ü–æ–¥–±–æ—Ä –µ–¥—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ùå")
    await start(call.message)
    await bot.delete_message(call.message.chat.id, call.message.message_id)

@fsm_router.callback_query(F.data == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    photo = types.FSInputFile("images/image.png")
    await call.message.answer_photo(photo=photo, caption=start_text, reply_markup=start_kb)

@fsm_router.callback_query(F.data == "start_fsm")
async def start_fsm(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Food.type)
    await call.message.answer("–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=create_dynamic_kb(food_type))
    await bot.delete_message(call.message.chat.id, call.message.message_id)

@fsm_router.callback_query(Food.type)
async def choose_type(call: types.CallbackQuery, state: FSMContext):
    choice = call.data
    await state.update_data(type=choice)

    if choice == "–ü–æ–ª–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å":
        await state.set_state(Food.mood)
        await call.message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:", reply_markup=create_dynamic_kb(mood))
    else:
        await state.set_state(Food.format)
        await call.message.answer("–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –µ–¥—ã –≤–∞–º —É–¥–æ–±–Ω–µ–µ?", reply_markup=create_dynamic_kb(format))
    await bot.delete_message(call.message.chat.id, call.message.message_id)

@fsm_router.callback_query(Food.format)
async def choose_format(call: types.CallbackQuery, state: FSMContext):
    choice = call.data
    await state.update_data(format=choice)
    await state.set_state(Food.mood)
    await call.message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:", reply_markup=create_dynamic_kb(mood))
    await bot.delete_message(call.message.chat.id, call.message.message_id)

@fsm_router.callback_query(Food.mood)
async def choose_mood(call: types.CallbackQuery, state: FSMContext):
    choice = call.data
    await state.update_data(mood=choice)

    data = await state.get_data()
    if data.get("type") == "–ü–æ–ª–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å":
        await state.set_state(Food.aim)
        await call.message.answer("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?", reply_markup=create_dynamic_kb(aim))
    else:
        await state.set_state(Food.aim)
        await call.message.answer("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?", reply_markup=create_dynamic_kb(aim))
    await bot.delete_message(call.message.chat.id, call.message.message_id)

@fsm_router.callback_query(Food.aim)
async def choose_aim(call: types.CallbackQuery, state: FSMContext):
    choice = call.data
    await state.update_data(aim=choice)

    data = await state.get_data()
    if data.get("type") == "–ü–æ–ª–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å":
        await state.set_state(Food.calories)
        await call.message.answer("–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π —Ç–µ–±–µ –Ω—É–∂–Ω–æ?", reply_markup=create_dynamic_kb(calories))
    elif data.get("format") in ["–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∫—É—Å", "–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –±–ª—é–¥–æ"]:
        await state.set_state(Food.preferences)
        await call.message.answer("–ö–∞–∫–∏–µ —É —Ç–µ–±—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?", reply_markup=create_dynamic_kb(preferences))
    elif data.get("format") == "–î–µ—Å–µ—Ä—Ç":
        await finish_with_ai(call, state)
        await bot.delete_message(call.message.chat.id, call.message.message_id
    else:
        await state.set_state(Food.drink_effect)
        await call.message.answer("–ö–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç —Ö–æ—á–µ—à—å –æ—Ç –Ω–∞–ø–∏—Ç–∫–∞?", reply_markup=create_dynamic_kb(drink_effect))
    await bot.delete_message(call.message.chat.id, call.message.message_id)

@fsm_router.callback_query(Food.calories)
async def choose_calories(call: types.CallbackQuery, state: FSMContext):
    choice = call.data
    await state.update_data(calories=choice)
    await state.set_state(Food.meals)
    await call.message.answer("–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å?", reply_markup=create_dynamic_kb(meals))
    await bot.delete_message(call.message.chat.id, call.message.message_id)

@fsm_router.callback_query(Food.meals)
async def choose_meals(call: types.CallbackQuery, state: FSMContext):
    choice = call.data
    await state.update_data(meals=choice)
    await finish_with_ai(call, state)
    await bot.delete_message(call.message.chat.id, call.message.message_id)

@fsm_router.callback_query(Food.preferences)
async def choose_preferences(call: types.CallbackQuery, state: FSMContext):
    choice = call.data
    await state.update_data(preferences=choice)
    await finish_with_ai(call, state)
    await bot.delete_message(call.message.chat.id, call.message.message_id)

@fsm_router.callback_query(Food.drink_effect)
async def choose_drink_effect(call: types.CallbackQuery, state: FSMContext):
    choice = call.data
    await state.update_data(drink_effect=choice)
    await state.set_state(Food.drink_base)
    await call.message.answer("–ò–∑ —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Ç–æ–∫?", reply_markup=create_dynamic_kb(drink_base))
    await bot.delete_message(call.message.chat.id, call.message.message_id)

@fsm_router.callback_query(Food.drink_base)
async def choose_drink_base(call: types.CallbackQuery, state: FSMContext):
    choice = call.data
    await state.update_data(drink_base=choice)
    await finish_with_ai(call, state)
    await bot.delete_message(call.message.chat.id, call.message.message_id)

async def finish_with_ai(call: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ‚è≥
    loading_message = await call.message.answer("‚è≥ –ü–æ–¥–±–∏—Ä–∞–µ–º —Ä–∞—Ü–∏–æ–Ω...")

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if user_data.get('type') == "–ü–æ–ª–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å":
        prompt = f"""–ü–æ–¥–±–µ—Ä–∏ —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
–¢–∏–ø: {user_data.get('type')}
–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {user_data.get('mood')}
–¶–µ–ª—å: {user_data.get('aim')}
–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {user_data.get('calories')}
–ü—Ä–∏–µ–º—ã –ø–∏—â–∏: {user_data.get('meals')}
–§–æ—Ä–º–∞—Ç: {user_data.get('format')}
–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {user_data.get('preferences')}
–≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–ø–∏—Ç–∫–∞: {user_data.get('drink_effect')}
–û—Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—Ç–∫–∞: {user_data.get('drink_base')}

–û—Ç–≤–µ—Ç –¥–∞–π –≤ –≤–∏–¥–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ —Å –±–ª—é–¥–∞–º–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–∏ –∏ –±—Ä–µ–Ω–¥—ã. –ù–∞–ø–∏—à–∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏ –∏ –ø–æ-—Ä—É—Å—Å–∫–∏.
"""
    else:
        prompt = f"""–ü–æ–¥–±–µ—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –±–ª—é–¥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
–§–æ—Ä–º–∞—Ç: {user_data.get('format')}
–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {user_data.get('mood')}
–¶–µ–ª—å: {user_data.get('aim')}
–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {user_data.get('preferences')}
–≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–ø–∏—Ç–∫–∞: {user_data.get('drink_effect')}
–û—Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—Ç–∫–∞: {user_data.get('drink_base')}

–ù–∞–ø–∏—à–∏:
- –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞.
- –°–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏.
- –ü–æ—à–∞–≥–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è.
–ü–∏—à–∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏ –∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –±—Ä–µ–Ω–¥—ã!
"""

    ai_response = await ask_ai(prompt)
    await state.update_data(last_prompt=prompt)
    await state.set_state(Food.done)

    response = f"üîç –ò–ò –ø–æ–¥–æ–±—Ä–∞–ª —Ç–µ–±–µ —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n\n" \
               f"üìå –¢–∏–ø: {user_data.get('type')}\n" \
               f"üìå –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {user_data.get('mood')}\n" \
               f"üìå –¶–µ–ª—å: {user_data.get('aim')}\n" \
               f"üìå –§–æ—Ä–º–∞—Ç: {user_data.get('format')}\n" \
               f"üìå –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {user_data.get('preferences')}\n" \
               f"üìå –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–ø–∏—Ç–∫–∞: {user_data.get('drink_effect')}\n" \
               f"üìå –û—Å–Ω–æ–≤–∞: {user_data.get('drink_base')}\n\n" \
               f"üçΩÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{ai_response}"

    if user_data.get('type') == "–ü–æ–ª–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å":
        calories_choice = user_data.get('calories')
        link = ration_links.get(calories_choice)
        if link:
            response += f"\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞—Ü–∏–æ–Ω: {link}"

    # –£–¥–∞–ª—è–µ–º ‚è≥
    await bot.delete_message(call.message.chat.id, loading_message.message_id)

    await call.message.answer(response, reply_markup=create_end_kb(["–î—Ä—É–≥–æ–µ –±–ª—é–¥–æ", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]))
    await bot.delete_message(call.message.chat.id, call.message.message_id)


@fsm_router.callback_query(F.data == "–î—Ä—É–≥–æ–µ –±–ª—é–¥–æ", Food.done)
async def repeat_dish(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    prompt = data.get("last_prompt")
    ai_response = await ask_ai(prompt)

    response = f"üçΩÔ∏è –í–æ—Ç –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ –ø–æ —Ç–µ–º –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:\n\n{ai_response}"
    await call.message.answer(response, reply_markup=create_end_kb(["–î—Ä—É–≥–æ–µ –±–ª—é–¥–æ", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]))
    await bot.delete_message(call.message.chat.id, call.message.message_id)
